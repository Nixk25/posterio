// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  premium       Boolean   @default(false)
  role          String    @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  posters       Poster[]
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Poster {
  id          String   @id @default(cuid()) @map("_id")
  title       String
  description String?
  fonts       String[]
  colors      String[]
  tools       String[]
  views       Int      @default(0)
  socials     String[]
  imgUrl      String

  categoryIds String[]
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  posterCategories PosterCategory[]
}

model Category {
  id          String  @id @default(cuid()) @map("_id")
  name        String  @unique
  description String?

  posters PosterCategory[]
}

model PosterCategory {
  id         String @id @default(cuid()) @map("_id")
  posterId   String
  categoryId String

  poster   Poster   @relation(fields: [posterId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([posterId, categoryId])
}
